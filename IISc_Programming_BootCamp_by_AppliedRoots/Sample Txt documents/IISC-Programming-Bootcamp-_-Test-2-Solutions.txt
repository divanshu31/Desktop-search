Cycle Detection:

Problem Statement:

A linked list is said to contain a cycle if any node is visited more than once while traversing the list. Given a pointer to the head of a linked list, determine if it contains a cycle. If it does, return 1. Otherwise, return 0.

Example

head refers to the list of nodes 1->2->3-> NULL

The numbers shown are the node numbers, not their data values. There is no cycle in this list so return .

head refers to the list of nodes 1->2->3->1-> NULL

There is a cycle where node 3 points back to node 1, so return 1.

Function Description

Complete the has_cycle function in the editor below.

It has the following parameter:

SinglyLinkedListNode pointer head: a reference to the head of the list

Returns

int: 1 if there is a cycle or 0 if there is not
Note: If the list is empty, head will be null.

Input Format

The code stub reads from stdin and passes the appropriate argument to your function. The custom test cases format will not be described for this question due to its complexity. Expand the section for the main function and review the code if you would like to figure out how to create a custom case.

Constraints:

0<= list size <= 1000

Sample Input:
References to each of the following linked lists are passed as arguments to your function:


Sample Output

0
1

Explanation

The first list has no cycle, so return .
The second list has a cycle, so return .

Approach 1:

Algorithm:

We go through each node one by one and record each node's reference (or memory address) in a hash table. If the current node is null, we have reached the end of the list and it must not be cyclic. If current node's reference is in the hash table, then return true.

Python code:

def has_cycle(head):
    s = set()
    temp = head
    while temp != None:
        if temp in s:
            return True
        else:
            s.add(temp)
        temp = temp.next 
    return False

Approach 2:

Algorithm

The space complexity can be reduced to O(1) by considering two pointers at different speeds - a slow pointer and a fast pointer. The slow pointer moves one step at a time while the fast pointer moves two steps at a time.

If there is no cycle in the list, the fast pointer will eventually reach the end and we can return false in this case.

Now consider a cyclic list and imagine the slow and fast pointers are two runners racing around a circle track. The fast runner will eventually meet the slow runner. Consider this case (we name it case A) - The fast runner is just one step behind the slow runner. In the next iteration, they both increment one and two steps respectively and meet each other.

Python code:

def has_cycle(head):
    if(head == None or head.next == None):
            return False
    else:
        f = head
        s = head
        while(f.next and f.next.next):
            f = f.next.next
            s = s.next
            if(f == s):
                return True

        return False

Tree : Top View:

Given a pointer to the root of a binary tree, print the top view of the binary tree.

The tree as seen from the top of the nodes, is called the top view of the tree.

For example :

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
Top View : 1->2->5->6

Complete the function topView and print the resulting values on a single line separated by space

Input Format

You are given a function,

void topView(node * root) {

}
Constraints

1 <= Nodes in the tree <= 500

Output Format

Print the values on a single line separated by space.

Sample Input

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
Sample Output

1 2 5 6

Explanation

   1
    \
     2
      \
       5
      /  \
     3    6
      \
       4
From the top, only nodes 1,2,5,6 are visible.

Recursive Approach:

The problem can be solved using the hashing. The idea is to create an empty hashmap where the key represents the relative horizontal distance of the node from the root node and value in the map maintains a pair containing the node value and its level number. Then we do pre-order traversal of the tree and if the current level of a node is less than the maximum level seen so far for the same horizontal distance as the current horizontal distance is seen for the first time, we update the value and the level for current horizontal distance in the map. For each node we recur for its left subtree by decreasing horizontal distance and increasing level by 1 and recur for right subtree by increasing both level and horizontal distance by 1.

Python Code:

def topViewUtil(root, dist, level, dict):
 
    if root is None:
        return
 
    if dist not in dict or level < dict[dist][1]:
        dict[dist] = (root.info, level)

    topViewUtil(root.left, dist - 1, level + 1, dict)

    topViewUtil(root.right, dist + 1, level + 1, dict)
                
def topView(root):
    #Write your code here
    dict = {}
 
    topViewUtil(root, 0, 0, dict)
 
    for key in sorted(dict.keys()):
        print(dict.get(key)[0], end=' ')

Iterative Approach:

The idea here is to observe that, if we try to see a tree from its top, then only the nodes which are at top in vertical order will be seen. Start BFS from root. Maintain a queue of pairs comprising of node(Node *) type and vertical distance of node from root. Also, maintain a map which should store the node at a particular vertical distance. While processing a node, just check if any node is there in the map at that vertical distance. If any node is there, it means the node can't be seen from top, do not consider it. Else, if there is no node at that vertical distance, store that in a map and consider for top view.

Python code:

def topView(root):
    #Write your code here
    if (root == None):
        return
  
    temp = None
  
    q = []
  

    mp = dict()
  
    q.append([root, 0])
  
    while (len(q) != 0):
        temp = q[0][0]
        d = q[0][1]
        q.pop(0)
  
        if d not in sorted(mp):
            mp[d] = temp.info
  
        if (temp.left):
            q.append([temp.left, d - 1])
  
        if (temp.right):
            q.append([temp.right, d + 1])
             
    for i in sorted(mp):
        print(mp[i], end = ' ')
 
Find Merge Point of Two Lists
Problem Statement:

Given pointers to the head nodes of 2 linked lists that merge together at some point, find the node where the two lists merge. The merge point is where both lists point to the same node, i.e. they reference the same memory location. It is guaranteed that the two head nodes will be different, and neither will be NULL. If the lists share a common node, return that node's data value.

Note: After the merge point, both lists will share the same node pointers.

Example

In the diagram below, the two lists converge at Node x:

[List #1] a--->b--->c
                     \
                      x--->y--->z--->NULL
                     /
     [List #2] p--->q

Function Description

Complete the findMergeNode function in the editor below.

findMergeNode has the following parameters:

SinglyLinkedListNode pointer head1: a reference to the head of the first list
SinglyLinkedListNode pointer head2: a reference to the head of the second list
Returns

int: the data value of the node where the lists merge

Two Pointers Approach:

Maintain two pointers pA and pB initialized at the head of A and B, respectively. Then let them both traverse through the lists, one node at a time.
When pA reaches the end of a list, then redirect it to the head of B (yes, B, that's right.); similarly when pBpB reaches the end of a list, redirect it the head of A.
If at any point pApA meets pB, then pA/pB is the intersection node.

Python code:

def findMergeNode(head1, head2):
    def count(head):
        count=0
        temp=head
        while(temp):
            count+=1
            temp=temp.next
        return count

    def getIntersection(head1,head2,d):
        temp1=head1
        temp2=head2
        for i in range(d):
            temp1=temp1.next
        while temp1 is not None and temp2 is not None:
            if temp1==temp2:
                return temp1.data
            temp1=temp1.next
            temp2=temp2.next

        return None
        
    t1=count(head1)
    t2=count(head2)
    if t1>t2:
        d=t1-t2
        return getIntersection(head1,head2,d)
    else:
        d=t2-t1
        return getIntersection(head2,head1,d)

Tree: Level Order Traversal

Problem statement :

Given a pointer to the root of a binary tree, you need to print the level order traversal of this tree. In level-order traversal, nodes are visited level by level from left to right. Complete the function  and print the values in a single line separated by a space.

For example:

     1
      \
       2
        \
         5
        /  \
       3    6
        \
         4  
For the above tree, the level order traversal is 1->2->5->3->6->4.

Input Format

You are given a function,

void levelOrder(Node * root) {

}
Constraints

1<= Nodes in the tree <=500  

Output Format

Print the values in a single line separated by a space.

Sample Input

     1
      \
       2
        \
         5
        /  \
       3    6
        \
         4  
Sample Output

1 2 5 3 6 4

Explanation

We need to print the nodes level by level. We process each level from left to right.
Level Order Traversal 1->2->5->3->6->4

Recursive approach:

Simple solution is to print all the nodes of level 1 followed by level 2 till the level h. Where h is the height of the tree. All nodes present in a level can be printed by modifying pre-order traversal of the tree.

Python code:

def printLevel(root, level):
 
    if root is None:
        return False
 
    if level == 1:
        print(root.info, end=' ')
 
        return True
 
    left = printLevel(root.left, level - 1)
    right = printLevel(root.right, level - 1)
 
    return left or right
 
def levelOrder(root):
    #Write your code here
    level = 1
 
    while printLevel(root, level):
        level = level + 1

Iterative approach:

We solve the iterative approach with the help of Queue. We iterate the queue until the queue is empty.

Python code:

from collections import deque
def levelOrder(root):
    queue = deque()
    queue.append(root)
 
    while queue:
        curr = queue.popleft()
 
        print(curr.info, end=' ')
 
        if curr.left:
            queue.append(curr.left)
 
        if curr.right:
            queue.append(curr.right)


